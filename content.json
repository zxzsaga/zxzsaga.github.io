{"pages":[{"title":"About","text":"90后程序员，热爱游戏与足球。 没有当上足球运动员，但成为了游戏开发者。","link":"/about/index.html"}],"posts":[{"title":"Skywind Inside Review","text":"最近关注了一位大牛韦易笑（这花名是表示他爱武侠也爱笑吗？），把他到目前为止的博文大致浏览了一下。我比较感兴趣的内容主要是关于 游戏开发随笔 和 网络游戏技术 两部分的。今天记录一下看了他一些 游戏开发随笔 后的感悟。 这方面的文章有三篇： 现实主义题材需要拯救（2007） 你为什么会离开游戏行业？（2015） 二十年前是怎样开发游戏的？（2015） 现实主义题材需要拯救首先他谈到的是参考游戏 vs 参考生活。做游戏不应该只参考游戏，而应该参考生活，因为艺术源于生活。现在很多人忘了这点，所以做不出创新。游戏只是一个载体，就像小说、电影一样。它所承载的内容才是更重要的。如果只关心做游戏的技术，而不注重观察生活，可能在“术”上能做到很高的水准，但却做不到“艺”上的合格，从而做不出游戏的作品。所以做游戏的不应该住关注游戏领域，而应该关注生活的方方面面，创意往往来源于这些地方，Overcooked 就是很好的例子。 其次谈到了创新 vs 改良。 人类既是依赖习惯的动物，也是追求新鲜感的动物。 好的游戏应该平衡着两点，类似的观点在开发者：独立游戏的十个成功秘诀（以及为什么它们不存在）一文中也有所谈到。熟悉感能让玩家将作品与之前的美好记忆联系起来，并被它吸引；新颖性为玩家带来令人兴奋的新鲜感受。做的游戏不应该太老套，也不应该太过新颖让人难以理解。 下面一个重要的话题是现代题材 vs 古典题材。我们背负了五千年文化的大包袱，很少有关于现代题材的优秀游戏。大厂不愿意做现代题材，只有某些个人的灵光乍现，才会产生一些现代题材游戏，像潜伏之赤途/隐形守护者的优秀游戏太少了，而且始终不是主流。 我一直认为把武侠的精神代入现代题材有着很好的意义，武侠是一种精神，而不是功夫。目前看来，相对于国内的研发水平，做这样的游戏太过冒险、太过宏大了，不过我相信以后会有这样的作品的， 现实主义题材需要拯救这篇文章作于2007年，现在已经2019年，文中所提到的问题依旧没有得到解决。大牛能在那个时候就有这些想法也不容易，而十几年过去了在这些方面一点儿进步也没有也是难得…… 不过挺好的，有问题才有机会，不然我们这些人干嘛呢？ 二十年前是怎样开发游戏的？啊，大概就是说20年开发游戏巨麻烦，什么都要自己实现，还没有资料查。励志的是最后两段： 行业总是要发展的，我也从《编程技巧与维护》《VGA显示原理》。。。和各种杂志上获取了不少知识，当年写这些文章的人，和身边搞计算机的，都比我大很多，我幼小的心灵里总有一份冲动，冥冥之中觉得将来自己肯定能超过他们，这不是因为我看不起她们，异或我狂妄自大，而是只有这样，站在她们肩上，才能对得起大家共同爱好的这个行业，大家共同追求的事业。 而今天，我会尽量利用业余时间，于各处培训游戏开发，帮助大家该如何实现各种东西，目的也只有一个，让今天的小孩将来有一天能够超过我，不是因为她们狂妄自大，异或我妄自菲薄，而是因为只有这样，让她们站在我的肩上，才能对得起大家共同爱好的这个行业，大家共同追求的这个事业。 太励志了（摇了摇头，自叹不如）。 你为什么会离开游戏行业？ 游戏产品成功率只有1%，做游戏成败犹如开宝箱。 做游戏不可持续发展，做游戏不如做应用。 开发团队失去主导。 游戏开发成本持续上升，创业越来越难。 劣币驱逐良币。 大家都只关心钱，不关心游戏了。 这篇文章推荐去看原文你为什么会离开游戏行业？ 总结一句话就是：做游戏赚钱越来越难了。 文章最后给出一碗鸡汤解决方案：做精品游戏、拼质量。 大家只有重新找准产品方向，在内容和品质上实现新的突破，继续把行业门槛推高，提升玩家审美。把所谓的大学生都能做的垃圾游戏们送进坟墓，结束目前的混乱，让游戏将重新回到不是谁都能做的年代，用一款款优秀的作品告诉渠道和用户，什么才叫真正的游戏。苹果能在手机泛滥到处山寨化的日子里，重新找到突破。今年上半年上线的若干3A大作，任然能在同质化严重的手游市场脱颖而出，结束了自2013年上半年来渠道被无限放大的乱象。凭借的都不是宣传，更不是渠道，而是一颗颗不甘沉沦的心，和扎扎实实多年摸爬滚打积累的经验。 当然，只有这样，行业价值从渠道回归产品本身，才能让整个行业更理性健康。当然，也只有这样，用一个个的精品游戏，重新将项目变回事业，开发组才能找回昔日逝去的尊严。到那时，渠道当然偶尔也可以招聘一两个大学生，做些棋牌和跑酷娱乐下，但是，那叫做玩具，不能称其为 “游戏作品” 。 我以为只有年纪比较小的人才会中二呢，哈哈，看来作者是真的热爱这行，而且很乐观，这比这段话更容易鼓励人。 大牛的博客里还有这样一篇奇葩：比尔·云风传奇，貌似讲的是云风大牛。以前网易的大牛还真多啊。","link":"/2019/03/29/Skywind-Inside-Review/"},{"title":"生日礼物：《只狼：影逝二度》","text":"今天是我28岁的生日，也是《只狼：影逝二度》的发售日。","link":"/2019/03/22/Sekiro-Release/"},{"title":"Odin Inspector and SerializedObject.","text":"Odin 是我最喜欢的 Unity Asset 之一，但我目前只喜欢用 Odin 的 Inspector, 而不爱用它的 Serializer, 规避风险。 我也很喜欢用 SerializedObject 来做数据存取，这比用 Excel, CSV, JSON, XML 等好用很多。用 SerializedObject 存取数据可以做到很多使用外部数据格式做不到的事情，比如支持像曲线、资源引用这样的数据类型，比如方便地使用自定义数据结构等。而且使用起来非常直观，可以查找 SerializedObject 的引用情况，也不再需要在运行时进行外部数据格式的反序列化，而且运行效率也高，还可以作为资源进行热更新。简直无敌了。 默认情况下 SerializedObject 的 Inspector 界面，贯彻了 Unity Inspector 一贯的丑。这个丑不单只看起来丑，这个丑已经影响到了它的易用性。那丑陋的数组，完全做不了表格的展示。 而 Odin Inspector 的 TableList 正好解决了这个问题： 不论是增查删改，Odin 的 TableList 都比原生的 Inspector 方便很多。 TableList 还有一些比较隐晦的方便之处，比如 SerializedObject 的嵌套。假如你有很多不同种类的子弹，每个子弹上都挂有对应子弹数据的 SerializedObject, 这些 SerializedObject 继承于同一个基类，但是它们是不同的类，它们有不同的字段。多个 SerializedObject 的管理需要一个一个去操作，这样就很繁琐。但是你可以创建一个新的 SerializedObject, 它拥有一个子弹数据基类的数组。默认情况下它的 Inspector 会是这样： 但是如果你给这个数组加上 TableList, 它就变成了： 对 TableList 中的字段进行修改，会应用到嵌套引用的 SerializedObject 中，非常的方便。 TableList 有一个特性，它的列是按照字段名进行排列的，同一个字段名下的每行的数据可能是不同的类型。这有什么用呢？还是在每行是继承于同一个子类的不同类型时有用。比如你有些子弹的速度是恒定的，就是一个 float, 而有些子弹的速度是随时间变化的，那就会是一个曲线。如果把这样的字段都以不同名称列下来，那么这个表格会有很多很多列。但实际上这些字段在同一行只会有一列有数据，虽然说不是一定要这样做，但是可以用这样的方式把它们放在同一列，就像上图的 Speed 和 Damage. 说了这么多 TableList 的用法，再讲一个 Odin 对于数组的改善。假如你设置了很多出生点 transform，你需要把它们序列化到一个数组中，在 Unity 默认情况下，你需要一个一个的进行拖拽。而用了 Odin 之后，你可以将这些出生点 transform 一起拖进 Odin 的数据，它就把所有的 transform 放进数组中了： 实际上我对 Odin 并没有太深入的研究，上面就是我平时用得多的一些用法。我认为 Odin Inspector 具有一些优秀插件应该有的特性： 不修改开发者使用 Unity 的方式，而是对 Unity 进行加强； 作为一个编辑器插件，可以轻松插拔，不产生额外的自定义数据； 在细节方面变现出色，把功能做到易用性中，而不是写到文档里。","link":"/2019/04/23/SerializedObject-and-Odin-Inspector/"}],"tags":[],"categories":[{"name":"Game Develop","slug":"Game-Develop","link":"/categories/Game-Develop/"}]}